-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity threed_render_hls_sin_or_cos_float_Pipeline_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    result_V : IN STD_LOGIC_VECTOR (28 downto 0);
    c_1_022_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    c_0_023_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    shift_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    shift_out_ap_vld : OUT STD_LOGIC;
    in_shift_V_1_cast_out : OUT STD_LOGIC_VECTOR (27 downto 0);
    in_shift_V_1_cast_out_ap_vld : OUT STD_LOGIC;
    shift_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    shift_1_out_ap_vld : OUT STD_LOGIC;
    trunc_ln10_out : OUT STD_LOGIC_VECTOR (27 downto 0);
    trunc_ln10_out_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of threed_render_hls_sin_or_cos_float_Pipeline_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln321_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln318_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal icmp_ln318_reg_281 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln319_fu_157_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln319_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal isNeg_reg_291 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1512_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1512_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln321_reg_302 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_UnifiedRetVal_phi_fu_115_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal in_shift_V_fu_54 : STD_LOGIC_VECTOR (28 downto 0);
    signal in_shift_V_2_fu_236_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal shift_fu_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_1_fu_202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_load_1_load_fu_255_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_62 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln318_fu_147_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln319_fu_153_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1488_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ush_fu_208_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1488_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1454_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1513_fu_229_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_86 : BOOLEAN;
    signal ap_condition_239 : BOOLEAN;
    signal ap_condition_242 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component threed_render_hls_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component threed_render_hls_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((icmp_ln321_reg_302 = ap_const_lv1_0) or (icmp_ln318_reg_281 = ap_const_lv1_1)))) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_115_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                end if;
            end if; 
        end if;
    end process;

    i_3_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_boolean_1 = ap_condition_239)) then 
                    i_3_fu_62 <= add_ln318_fu_147_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_3_fu_62 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    in_shift_V_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    in_shift_V_fu_54 <= result_V;
                elsif ((ap_const_boolean_1 = ap_condition_242)) then 
                    in_shift_V_fu_54 <= in_shift_V_2_fu_236_p1;
                end if;
            end if; 
        end if;
    end process;

    shift_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    shift_fu_58 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_242)) then 
                    shift_fu_58 <= shift_1_fu_202_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln318_reg_281 <= icmp_ln318_fu_141_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln318_fu_141_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln321_reg_302 <= icmp_ln321_fu_179_p2;
                isNeg_reg_291 <= select_ln319_fu_157_p3(31 downto 31);
                select_ln319_reg_285 <= select_ln319_fu_157_p3;
                sub_ln1512_reg_297 <= sub_ln1512_fu_173_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln318_fu_147_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_239_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln321_fu_179_p2, icmp_ln318_fu_141_p2)
    begin
                ap_condition_239 <= ((icmp_ln318_fu_141_p2 = ap_const_lv1_0) and (icmp_ln321_fu_179_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_condition_242_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln318_reg_281, icmp_ln321_reg_302)
    begin
                ap_condition_242 <= ((icmp_ln321_reg_302 = ap_const_lv1_1) and (icmp_ln318_reg_281 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_86_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_86 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln321_fu_179_p2, icmp_ln318_fu_141_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((icmp_ln318_fu_141_p2 = ap_const_lv1_1) or (icmp_ln321_fu_179_p2 = ap_const_lv1_0)))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_UnifiedRetVal_phi_fu_115_p4_assign_proc : process(icmp_ln318_reg_281, icmp_ln321_reg_302, ap_condition_86)
    begin
        if ((ap_const_boolean_1 = ap_condition_86)) then
            if (((icmp_ln321_reg_302 = ap_const_lv1_0) and (icmp_ln318_reg_281 = ap_const_lv1_0))) then 
                ap_phi_mux_UnifiedRetVal_phi_fu_115_p4 <= ap_const_lv1_0;
            elsif ((icmp_ln318_reg_281 = ap_const_lv1_1)) then 
                ap_phi_mux_UnifiedRetVal_phi_fu_115_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_UnifiedRetVal_phi_fu_115_p4 <= "X";
            end if;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_115_p4 <= "X";
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln318_reg_281, ap_block_pp0_stage0_11001, icmp_ln321_reg_302, ap_phi_mux_UnifiedRetVal_phi_fu_115_p4, ap_return_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((icmp_ln321_reg_302 = ap_const_lv1_0) or (icmp_ln318_reg_281 = ap_const_lv1_1)))) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_115_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_3_fu_62)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i <= i_3_fu_62;
        end if; 
    end process;

    icmp_ln318_fu_141_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv2_2) else "0";
    icmp_ln321_fu_179_p2 <= "1" when (select_ln319_fu_157_p3 = ap_const_lv32_10) else "0";
    in_shift_V_1_cast_out <= in_shift_V_fu_54(28 - 1 downto 0);

    in_shift_V_1_cast_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln318_reg_281, ap_block_pp0_stage0_11001, icmp_ln321_reg_302)
    begin
        if ((((icmp_ln321_reg_302 = ap_const_lv1_0) and (icmp_ln318_reg_281 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln318_reg_281 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_shift_V_1_cast_out_ap_vld <= ap_const_logic_1;
        else 
            in_shift_V_1_cast_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    in_shift_V_2_fu_236_p1 <= select_ln1513_fu_229_p3(29 - 1 downto 0);
    lshr_ln1488_fu_217_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1488_fu_213_p1),to_integer(unsigned('0' & ush_fu_208_p3(31-1 downto 0)))));
    select_ln1513_fu_229_p3 <= 
        lshr_ln1488_fu_217_p2 when (isNeg_reg_291(0) = '1') else 
        shl_ln1454_fu_223_p2;
    select_ln319_fu_157_p3 <= 
        c_1_022_reload when (trunc_ln319_fu_153_p1(0) = '1') else 
        c_0_023_reload;
    shift_1_fu_202_p2 <= std_logic_vector(unsigned(select_ln319_reg_285) + unsigned(shift_fu_58));
    shift_1_out <= std_logic_vector(unsigned(select_ln319_reg_285) + unsigned(shift_fu_58));

    shift_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln318_reg_281, ap_block_pp0_stage0_11001, icmp_ln321_reg_302)
    begin
        if (((icmp_ln321_reg_302 = ap_const_lv1_0) and (icmp_ln318_reg_281 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            shift_1_out_ap_vld <= ap_const_logic_1;
        else 
            shift_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    shift_load_1_load_fu_255_p1 <= shift_fu_58;

    shift_out_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln318_reg_281, icmp_ln321_reg_302, shift_fu_58, shift_load_1_load_fu_255_p1, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((icmp_ln318_reg_281 = ap_const_lv1_1)) then 
                shift_out <= shift_load_1_load_fu_255_p1;
            elsif (((icmp_ln321_reg_302 = ap_const_lv1_0) and (icmp_ln318_reg_281 = ap_const_lv1_0))) then 
                shift_out <= shift_fu_58;
            else 
                shift_out <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            shift_out <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shift_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln318_reg_281, ap_block_pp0_stage0_11001, icmp_ln321_reg_302)
    begin
        if ((((icmp_ln321_reg_302 = ap_const_lv1_0) and (icmp_ln318_reg_281 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln318_reg_281 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            shift_out_ap_vld <= ap_const_logic_1;
        else 
            shift_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1454_fu_223_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1488_fu_213_p1),to_integer(unsigned('0' & ush_fu_208_p3(31-1 downto 0)))));
    sub_ln1512_fu_173_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln319_fu_157_p3));
    trunc_ln10_out <= select_ln1513_fu_229_p3(28 - 1 downto 0);

    trunc_ln10_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln318_reg_281, ap_block_pp0_stage0_11001, icmp_ln321_reg_302)
    begin
        if (((icmp_ln321_reg_302 = ap_const_lv1_0) and (icmp_ln318_reg_281 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            trunc_ln10_out_ap_vld <= ap_const_logic_1;
        else 
            trunc_ln10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln319_fu_153_p1 <= ap_sig_allocacmp_i(1 - 1 downto 0);
    ush_fu_208_p3 <= 
        sub_ln1512_reg_297 when (isNeg_reg_291(0) = '1') else 
        select_ln319_reg_285;
    zext_ln1488_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_shift_V_fu_54),32));
end behav;
