// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module threed_render_hls_rotation_matrix_initial (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        rotation_theta,
        add_or_sub,
        sin_or_cos,
        ap_return
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] rotation_theta;
input   add_or_sub;
input   sin_or_cos;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_82_p2;
reg   [31:0] div_reg_147;
wire    ap_CS_fsm_state16;
wire   [0:0] or_ln27_fu_110_p2;
reg   [0:0] or_ln27_reg_152;
wire    ap_CS_fsm_state20;
wire   [31:0] grp_fu_69_p2;
reg   [31:0] x_assign_reg_156;
wire   [0:0] or_ln29_fu_122_p2;
reg   [0:0] or_ln29_reg_161;
wire   [31:0] grp_sin_or_cos_float_s_fu_88_ap_return;
reg   [31:0] tmp_reg_165;
wire    ap_CS_fsm_state22;
reg   [31:0] tmp_s_reg_170;
wire    ap_CS_fsm_state25;
wire    grp_sin_or_cos_float_s_fu_88_ap_start;
wire    grp_sin_or_cos_float_s_fu_88_ap_done;
wire    grp_sin_or_cos_float_s_fu_88_ap_idle;
wire    grp_sin_or_cos_float_s_fu_88_ap_ready;
reg   [0:0] grp_sin_or_cos_float_s_fu_88_do_cos;
wire   [31:0] bitcast_ln32_1_fu_137_p1;
reg   [31:0] ap_phi_mux_retval_0_phi_fu_61_p6;
wire    ap_CS_fsm_state23;
reg    grp_sin_or_cos_float_s_fu_88_ap_start_reg;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state17;
wire   [0:0] xor_ln27_fu_104_p0;
wire   [0:0] or_ln27_fu_110_p0;
wire   [0:0] xor_ln27_fu_104_p2;
wire   [0:0] xor_ln29_fu_116_p0;
wire   [0:0] xor_ln29_fu_116_p2;
wire   [31:0] bitcast_ln32_fu_128_p1;
wire   [31:0] xor_ln32_fu_131_p2;
reg   [31:0] ap_return_preg;
reg   [24:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
reg    ap_ST_fsm_state25_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 grp_sin_or_cos_float_s_fu_88_ap_start_reg = 1'b0;
#0 ap_return_preg = 32'd0;
end

threed_render_hls_sin_or_cos_float_s grp_sin_or_cos_float_s_fu_88(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_or_cos_float_s_fu_88_ap_start),
    .ap_done(grp_sin_or_cos_float_s_fu_88_ap_done),
    .ap_idle(grp_sin_or_cos_float_s_fu_88_ap_idle),
    .ap_ready(grp_sin_or_cos_float_s_fu_88_ap_ready),
    .t_in(x_assign_reg_156),
    .do_cos(grp_sin_or_cos_float_s_fu_88_do_cos),
    .ap_return(grp_sin_or_cos_float_s_fu_88_ap_return)
);

threed_render_hls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(div_reg_147),
    .din1(32'd1078530011),
    .ce(1'b1),
    .dout(grp_fu_69_p2)
);

threed_render_hls_fdiv_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_16_no_dsp_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(rotation_theta),
    .din1(32'd1127481344),
    .ce(1'b1),
    .dout(grp_fu_82_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_return_preg <= ap_phi_mux_retval_0_phi_fu_61_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_float_s_fu_88_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state21))) begin
            grp_sin_or_cos_float_s_fu_88_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_float_s_fu_88_ap_ready == 1'b1)) begin
            grp_sin_or_cos_float_s_fu_88_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        div_reg_147 <= grp_fu_82_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        or_ln27_reg_152 <= or_ln27_fu_110_p2;
        x_assign_reg_156 <= grp_fu_69_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln27_fu_110_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        or_ln29_reg_161 <= or_ln29_fu_122_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_reg_165 <= grp_sin_or_cos_float_s_fu_88_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_s_reg_170 <= grp_sin_or_cos_float_s_fu_88_ap_return;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

always @ (*) begin
    if ((grp_sin_or_cos_float_s_fu_88_ap_done == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

always @ (*) begin
    if ((grp_sin_or_cos_float_s_fu_88_ap_done == 1'b0)) begin
        ap_ST_fsm_state25_blk = 1'b1;
    end else begin
        ap_ST_fsm_state25_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        if (((or_ln29_reg_161 == 1'd0) & (or_ln27_reg_152 == 1'd1))) begin
            ap_phi_mux_retval_0_phi_fu_61_p6 = tmp_s_reg_170;
        end else if ((or_ln27_reg_152 == 1'd0)) begin
            ap_phi_mux_retval_0_phi_fu_61_p6 = tmp_reg_165;
        end else if (((or_ln29_reg_161 == 1'd1) & (or_ln27_reg_152 == 1'd1))) begin
            ap_phi_mux_retval_0_phi_fu_61_p6 = bitcast_ln32_1_fu_137_p1;
        end else begin
            ap_phi_mux_retval_0_phi_fu_61_p6 = 'bx;
        end
    end else begin
        ap_phi_mux_retval_0_phi_fu_61_p6 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_return = ap_phi_mux_retval_0_phi_fu_61_p6;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_sin_or_cos_float_s_fu_88_do_cos = 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_sin_or_cos_float_s_fu_88_do_cos = 1'd1;
    end else begin
        grp_sin_or_cos_float_s_fu_88_do_cos = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((or_ln27_fu_110_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((grp_sin_or_cos_float_s_fu_88_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((grp_sin_or_cos_float_s_fu_88_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign bitcast_ln32_1_fu_137_p1 = xor_ln32_fu_131_p2;

assign bitcast_ln32_fu_128_p1 = tmp_s_reg_170;

assign grp_sin_or_cos_float_s_fu_88_ap_start = grp_sin_or_cos_float_s_fu_88_ap_start_reg;

assign or_ln27_fu_110_p0 = sin_or_cos;

assign or_ln27_fu_110_p2 = (xor_ln27_fu_104_p2 | or_ln27_fu_110_p0);

assign or_ln29_fu_122_p2 = (xor_ln29_fu_116_p2 | xor_ln27_fu_104_p2);

assign xor_ln27_fu_104_p0 = add_or_sub;

assign xor_ln27_fu_104_p2 = (xor_ln27_fu_104_p0 ^ 1'd1);

assign xor_ln29_fu_116_p0 = sin_or_cos;

assign xor_ln29_fu_116_p2 = (xor_ln29_fu_116_p0 ^ 1'd1);

assign xor_ln32_fu_131_p2 = (bitcast_ln32_fu_128_p1 ^ 32'd2147483648);

endmodule //threed_render_hls_rotation_matrix_initial
